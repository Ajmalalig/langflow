name: Test Docker images

on:
  workflow_call:
    inputs:
      image_name:
        required: true
        type: string
      tag_name:
        required: true
        type: string
      nightly_tag_main:
        description: "Tag for the nightly main build"
        required: false
        type: string
        default: ''
      build_type:
        description: "Type of build to test"
        required: true
        type: string
        default: "base"
  workflow_dispatch:
    inputs:
      image_name:
        required: true
        type: string
      tag_name:
        required: true
        type: string
      nightly_tag_main:
        description: "Tag for the nightly main build"
        required: false
        type: string
        default: ''
      build_type:
        description: "Type of build to test"
        required: true
        type: string
        default: "base"
  push:
    branches: [main]
    paths:
      - "docker/**"
      - "uv.lock"
      - "pyproject.toml"
      - "src/backend/**"
      - ".github/workflows/docker_test.yml"
  pull_request:
    branches: [dev]
    paths:
      - "docker/**"
      - "uv.lock"
      - "pyproject.toml"
      - "src/**"
      - ".github/workflows/docker_test.yml"

env:
  POETRY_VERSION: "1.8.2"

jobs:
  test-docker:
    runs-on: ubuntu-latest
    name: Test docker images
    steps:
      - name: Check out the code at a specific ref
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.nightly_tag_main || github.ref }}
          persist-credentials: true
      - name: "Setup Environment"
        uses: ./.github/actions/setup-uv
      - name: Install the project
        run: uv sync --dev
      - name: Build image
        run: |
          docker build -t ${{ inputs.image_name }}:${{inputs.tag_name}} \
            -f docker/build_and_push.Dockerfile \
            .
      - name: Validate build type
        run: |
          if [[ "${{ inputs.build_type }}" != "base" && "${{ inputs.build_type }}" != "main" ]]; then
            echo "Error: build_type must be 'base' or 'main'."
            exit 1
          fi
      - name: Test image
        run: |
          if [ "$build_type" == "base" ]; then
            expected_version=$(uv tree | grep 'langflow-base' | awk '{print $3}' | sed 's/^v//')
          elif [ "$build_type" == "main" ]; then
            expected_version=$(uv tree | grep 'langflow' | grep -v 'langflow-base' | awk '{print $2}' | sed 's/^v//')
          fi
          version=$(docker run --rm --platform linux/amd64 --entrypoint bash ${{ inputs.image_name }}:${{inputs.tag_name}} -c 'python -c "from langflow.utils.version import get_version_info;  print(get_version_info()[\"version\"])"')
          if [ "$expected_version" != "$version" ]; then
              echo "Expected version: $expected_version"
              echo "Actual version: $version"
              exit 1
          fi